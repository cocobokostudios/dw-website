{"pageProps":{"postData":{"id":"using-java-build-script-tasks-in-visual-studio-code","htmlContent":"<p>I <a href=\"http://www.westerndevs.com/custom-tasks-for-java-in-visual-studio-code/\">previously shared</a> how I setup a custom problem matching in Visual Studio Code for compiling Java  and displaying the errors inline with a custom problem matcher.</p>\n<!--more-->\n<p>The shortcoming with <a href=\"https://code.visualstudio.com/docs/editor/tasks\">Tasks</a> was that you could only define one, which is (in my humble opinion) by design to help developers by forcing them to create a build script rather than setting up tasks, as a build script is not coupled to the IDE and can be used elsewhere.</p>\n<p>Code has support for build systems like Grunt, Gulp, and Jake, but what if we want to handle something totally different, like use Gradle on a Java project.</p>\n<p>How do you do that? Good question. Let me show you.</p>\n<h3>Define a Build Script</h3>\n<p>I've setup a standard Gradle project by using the <code>gradle init</code> and created a class with a main method named <code>HelloLink</code>.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/hellolink-file.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/hellolink-file.png\"></p>\n<p>Next up, I want to create a custom build task. We'll call our task <code>getSword</code>.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-project.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-project.png\"></p>\n<p>Now, we need to do the fun part: hook it into Code. </p>\n<h3>Add a Task to VS Code</h3>\n<p>If we take a page out of <a href=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/\">my previous post</a>, we need so to setup our <code>tasks.json</code> file. Do that by pressing <code>Ctrl + Shift + P</code> and searching for \"task\" and select for <em>Configure Task Runner</em>.</p>\n<p>Let's add gradle as our task, which should leave our tasks file looking like:</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-task.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-task.png\"></p>\n<p>When we run it, by pressing <code>Ctrl + P</code> and entering <code>task gradle</code> we should get the output window displaying our gradle command.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-task-output.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-task-output.png\"></p>\n<p>And now we're back to where we started, but gradle (like any build system) has way more tasks than just my custom one. How do I gain access to those?</p>\n<p>Simple: you add tasks to your gradle task.</p>\n<h3>Adding a Task to your Task</h3>\n<p>If you haven't already seen it, you have intellisense while you're editing your <code>tasks.json</code>. If you browse through the multitude of JSON properties, you'll find one called <em>tasks</em> which is where we can define our gradle specific tasks.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/tasks-intellisense.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/tasks-intellisense.png\"></p>\n<p>We define, what I call a subtask, just like we do a regular task, except the JSON schema is a little different. After adding a task for <code>getSword</code> and , my tasks file now looks like:</p>\n<p>{% codeblock lang:javascript %}\n{\n\"version\": \"0.1.0\",\n\"command\": \"gradle\",\n\"isShellCommand\": true,\n\"args\": [],\t// no args, but we could add some\n\"tasks\": [\n{\n\"taskName\": \"getSword\",\n\"showOutput\": \"always\",\n\"echoCommand\": true\n}\n]\n}\n{% endcodeblock %}</p>\n<p>Great, but so far we haven't done anything actually useful. Let's apply what we've learned here and from <a href=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/\">my previous post</a> and get a useful command setup in Code.</p>\n<h3>Doing Something Real</h3>\n<p>So, not only do we want a task to call custom tasks, but we'll probably want one to compile and run our Java too. The <a href=\"https://docs.gradle.org/current/userguide/application_plugin.html\">gradle application</a> provides us with a <code>run</code> command that we'll call as our default build command, which will give us the <em>F5</em> experience we know from our big, bloated, buddy, Visual Studio proper.</p>\n<p>Just like we did with the <code>javac</code> command, we need to add a problem matcher to our task. </p>\n<p>Our tasks file now looks like:</p>\n<p>{% codeblock lang:javascript %}\n{\n\"version\": \"0.1.0\",\n\"command\": \"gradle\",\n\"isShellCommand\": true,\n\"args\": [\"\"],\n\"tasks\": [\n{\n\"taskName\": \"getSword\",\n\"showOutput\": \"always\",\n\"echoCommand\": true\n},\n{\n\"taskName\": \"run\",\n\"showOutput\": \"silent\",\n\"isBuildCommand\": true,\n\"problemMatcher\": {\n\"owner\": \"external\",\n\"fileLocation\": \"absolute\",\n\"pattern\": [\n{\n\"regexp\": \"^(.+\\.java):(\\d):(?:\\s+(error)):(?:\\s+(.*))$\",\n\"file\": 1,\n\"location\": 2,\n\"severity\": 3,\n\"message\": 4,\n\"loop\": true\t// add this to loop through multiple lines\n}\n]\n}\n}\n]\n}\n{% endcodeblock %}</p>\n<p>And if you run it, you should get an error in our source code. Press <code>Ctrl + Shift + M</code> to see the warning about our static method, and click it to go to the error.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-error.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/gradle-error.png\"></p>\n<p>As you probably noticed, we set our <code>run</code> task, we've set it to be the <em>Build Command</em> so that when we hit <code>Ctrl + Shift + B</code> it will execute our command. So, once we go and fix our application we can run it with a keyboard shortcut.</p>\n<p>You can open up your output window by hitting <code>Ctrl + Shift + U</code> and see our application in action.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/complete.png\" alt=\"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/complete.png\"></p>\n<h2>The Point</h2>\n<p>This is just one simple example using Gradle, but you could use Maven or Ant, or whatever custom build script tool you want, assuming it has a command line response. </p>\n<p>There are plenty of other things you can configure with tasks, including the OS-specific commands that need to be executed. Take a look at the <a href=\"https://code.visualstudio.com/docs/editor/tasks_appendix\">JSON Schema</a> for more details.</p>\n<hr>\n<p>Thanks for playing. ~ DW </p>\n","layout":"post","title":"Using Java Build Script Tasks in Visual Studio Code","date":"Wed Oct 21 2015 03:18:19 GMT-0500 (Central Daylight Time)","categories":null,"comments":true,"authorId":"david_wesst","originalurl":"http://blog.davidwesst.com/2015/10/Using-Java-Build-Script-Tasks-in-Visual-Studio-Code/"}},"__N_SSG":true}