{"pageProps":{"postData":{"id":"how-to-compile-typescript-into-a-single-file-with-systemjs-modules-with-gulp","htmlContent":"<p>I've been messing around with TypeScript again for my <a href=\"https://blog.davidwesst.com/2017/03/Intital-Thoughts-on-Using-Phaser/\">game project</a> and wanted a module loader to consume the single file produced by the TypeScript compiler. This time around I decided to use SystemJS and figured I'd share the lessons I learned along the way.</p>\n<h5>Sample Project</h5>\n<p>If you're interested in playing with the code, you can checkout <a href=\"https://github.com/davidwesst/ts-systemjs\">this GitHub project</a> I setup just for that reason.</p>\n<h5>Previous Post</h5>\n<p>I also posted about doing the same sort of thing <a href=\"https://blog.davidwesst.com/2016/09/How-to-Compile-Typescript-into-a-Single-File-with-AMD-Modules/\">with AMD and RequireJS</a> complete with <a href=\"https://github.com/davidwesst/ts-project-template\">a GitHub sample project</a></p>\n<h2>Project Breakdown</h2>\n<p>Here's the gist of it. My project has the following requirements:</p>\n<ol>\n<li>Source code in TypeScript, organized in to multiple modules</li>\n<li>Load external modules into application as dependencies</li>\n<li>Transpile down to a single bundle file</li>\n<li>Load the bundle in the browser</li>\n</ol>\n<p>It seems pretty straight forward, right? Plus, because I'm using TypeScript I figured this would be easy peezy lemon-squeezy with the <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">TypeScript compiler</a> and rich documentation.</p>\n<p>As it turns out, it wasn't that simple.</p>\n<h3>Wait. Where's GulpJS?</h3>\n<p>It's in the sample project handling the transpiling the TypeScript through a task. </p>\n<p>It's actually not required, but rather a convienience for keeping all my build tasks together. I just put it in the title, because it matches the previous post.</p>\n<h2>Problem 1: Using an External Module</h2>\n<p>I wanted to use <a href=\"https://momentjs.com/\">Moment.js</a> to help handle date objects with my code.</p>\n<p>There were two parts to this: </p>\n<ul>\n<li>Getting it working in the development environment</li>\n<li>Getting it bundled up with SystemJS.</li>\n</ul>\n<h3>Using it in Development</h3>\n<p>I use <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, which is a great TypeScript development environment. </p>\n<p>Normally, you would use the <a href=\"https://www.npmjs.com/search?q=%40types\"><code>@types</code></a> collection of defintion files from the NPM which is wired up by default. For Moment, we need to break that.</p>\n<p>The definition file for Moment is found in the library itself. Since I use NPM to handle all my dependencies, you just set this up in your <code>tsconfig.json</code> file.</p>\n<p><img src=\"http://i.imgur.com/TyAgU0N.png\"></p>\n<p>Then, in code, we import it.</p>\n<pre><code class=\"language-javascript\">import moment from \"moment\";\n</code></pre>\n<p>Remember: if your project is already using <code>@types</code> definition files, you'll need to add that folder to the <code>typeRoots</code> collection yourself.</p>\n<h3>Bundling it Up</h3>\n<p>Because we're using SystemJS, we need to do is configure it as a path to understand where to find the library when it gets referenced.</p>\n<p>In the <a href=\"https://github.com/davidwesst/ts-systemjs\">sample project</a>, we do it in <code>script</code> tag on the HTML page, but you can do this in wherever you end up doing your SystemJS configuration.</p>\n<pre><code class=\"language-javascript\">SystemJS.config({\n    \"paths\": {\n        \"moment\": \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\"\n    }\n});\n</code></pre>\n<h2>Problem 2: Loading the Bundle</h2>\n<p>Making a bundle is easy. Consuming the bundle is something different.</p>\n<h3>Making a Bundle</h3>\n<p>If you're interested in bundling your code into a single file with the compiler, you're limited to AMD or SystemJS modules. This is configured in the <code>tsconfig.json</code> file included in <a href=\"https://github.com/davidwesst/ts-systemjs\">the sample project</a> with the module property. You can read more about it <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">here in the TypeScript Handbook</a>.</p>\n<p><img src=\"http://i.imgur.com/gUGeHfI.png\"></p>\n<h3>Consuming the Bundle</h3>\n<p>This is where I got stuck.</p>\n<p>Now I have this fancy bundle, but I need to figure out how to consume it in my HTML page. The solution is pretty simple, but it took some research and some tinkering, but I got there.</p>\n<p>Take a look at the <code>&#x3C;body></code> take of the HTML file:</p>\n<pre><code class=\"language-html\">&#x3C;body>\n    &#x3C;div id=\"display\">\n        &#x3C;!-- script will display content here -->\n    &#x3C;/div>\n\n    &#x3C;script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.20.9/system.js\">&#x3C;/script>\n    &#x3C;script src=\"bundle.js\">&#x3C;/script>\n    &#x3C;script>\n        SystemJS.config({\n            \"paths\": {\n                \"moment\": \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\"\n            }\n        });\n\n        SystemJS.import(\"game\")\n            .then((module)=> {\n                let g = new module.Game(\"display\");\n                g.start();\n            })\n            .catch((error)=> {\n                console.error(error);\n            });\n    &#x3C;/script>\n&#x3C;/body>\n</code></pre>\n<p>I blame myself for getting stuck considering this sort all documented well in the <a href=\"https://github.com/systemjs/systemjs\">SystemJS documentation on GitHub</a>. Either way, I had issues finding solid resources about using bundles. Hopefull this can help someone else in the future.</p>\n<h2>Conclusion</h2>\n<p>My problems can be traced back to my lack of experience with JavaScript module loaders. And yes, I know that <a href=\"http://caniuse.com/#feat=es6-module\">ES6 Modules are coming</a>, but the browsers are a ways away from having a full implementation (except for Safari). </p>\n<p>Until then, we'll be using TypeScript and <a href=\"http://babeljs.io/\">Babel</a> to help us get our modular JavaScript working in the browser.</p>\n","layout":"post","title":"How to Compile TypeScript into a Single File with SystemJS Modules with Gulp","categories":["javascript"],"date":"Tue Mar 14 2017 04:47:22 GMT-0500 (Central Daylight Time)","tags":["javascript","typescript","systemjs","modules","gulpjs"],"excerpt":"I decided to move a TypeScript project from AMD modules (i.e. RequireJS) to SystemJS, still using Gulp. In this post, I walk you through the sample project I've created and share the lessons I learned along the way.","authorId":"david_wesst","originalurl":"https://blog.davidwesst.com/2017/03/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/"}},"__N_SSG":true}