{"pageProps":{"postData":{"id":"capture-https-traffic-in-java-with-eclipse-and-fiddler","htmlContent":"<p>I've been struggling with a JSON parsing error where my application is using the <a href=\"https://spring.io/guides/gs/consuming-rest/\">Spring</a> to send and receive messages from a RESTful Web Service. It's pretty straight forward: I've annotated my object properties to match up with the appropriate JSON keys, Spring takes my POJO and turns it into a JSON string sends the request along with the JSON as the body to the HTTPS endpoint, et voil√†!  </p>\n<!--more-->\n<h2>The Problem</h2>\n<p>The problem comes in when something goes wrong with the request/response. Because the Spring obfuscates the actual request/response content, debugging it means you need to take a look at the traffic being sent over the wire. Since we're using a good RESTful service, the connection is done through HTTPS, meaning it's encrypted with a certificate that we don't have.</p>\n<p>On top of that, it appears that Fiddler doesn't automatically capture Java HTTP traffic automatically, so that's a thing too.</p>\n<p>After some internet sleuthing, I put together a solution that I wanted to share with you all, and so that I don't forget how to do it myself.</p>\n<h3>Setup</h3>\n<ol>\n<li>Downlaod and Install <a href=\"http://www.telerik.com/fiddler\">Fiddler</a>. I used Fiddler4, because I'm awesome.</li>\n<li>Run it and make sure it's capturing HTTP traffic</li>\n<li>Open <em>Tools --> Fiddler Options --> Connections Tab</em> and take note of the \"Fiddler listens on port\" value. It's likely 8888, but best to be sure.</li>\n<li>In the same window select <em>HTTPS Tab</em> and make sure sure that the following options <strong>are checked</strong>:<ul>\n<li>Capture HTTPS CONNECTS</li>\n<li>Decrypt HTTPS traffic (...from all processes)</li>\n</ul></li>\n</ol>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/certificate-warning.png\" alt=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/certificate-warning.png\"></p>\n<ol start=\"6\">\n<li>Read, and if you're alright with it, install the certificate.</li>\n<li>On the HTTPS tab, click the <em>Export Root Certificate to Desktop</em> and click OK.</li>\n</ol>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/fiddler-options.png\" alt=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/fiddler-options.png\"></p>\n<h3>Generating a Keystore</h3>\n<ol>\n<li>Open a command line terminal as an administrator</li>\n<li>Run the keytool for the JDK your application is using:</li>\n</ol>\n<p>{% codeblock lang:powershell %}</p>\n<p>&#x3C;JDK_Home>\\bin\\keytool.exe -import -file C:\\Users\\<Username>\\Desktop\\FiddlerRoot.cer^\n-keystore FiddlerKeystore -alias Fiddler</p>\n<p>{% endcodeblock %}</p>\n<ol start=\"3\">\n<li>Enter a password and remember it</li>\n<li>Your keystore is created as a file named \"FiddlerKeystore*. Take note of where it is located on your machine.</li>\n</ol>\n<h3>Configuring Eclipse</h3>\n<p><strong>NOTE:</strong> You are not required to use Eclipse for this, but it seems to be the popular way of writing Java code.</p>\n<ol>\n<li>Open your project and go to <em>Run --> Run Configurations</em></li>\n<li>Select the Run Configuration you want to use where you'll capture the HTTPS traffic.</li>\n<li>Select the <em>Arguments</em> tab</li>\n<li>Add the following to the <em>VMargs</em> textbox:</li>\n</ol>\n<p>{% codeblock lang:java %}</p>\n<p>-DproxySet=true\n-DproxyHost=127.0.0.1\n-DproxyPort=8888\n-Djavax.net.ssl.trustStore=\"path\\to\\keystore\\FiddlerKeystore\"\n-Djavax.net.ssl.trustStorePassword=yourpassword</p>\n<p>{% endcodeblock %}</p>\n<ol start=\"5\">\n<li>Click the <em>Apply</em> button</li>\n<li>Click the <em>Run</em> button to try it out</li>\n</ol>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/eclipse-settings.png\" alt=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/eclipse-settings.png\"></p>\n<p>Tada! You're done, and you should now be able to run your code and see the HTTP request and response, completely.</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/fiddler-success.png\" alt=\"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/fiddler-success.png\"></p>\n<h3>Alternative Solution --- Configuring Your Code</h3>\n<p>Add the following lines to the application that you want to capture the HTTPS traffic.</p>\n<p>{% codeblock lang:java %}</p>\n<p>// for capturing HTTP traffic\nSystem.setProperty(\"http.proxyHost\", \"127.0.0.1\");\nSystem.setProperty(\"http.proxyPort\", \"8888\");\n// for capturing HTTPS traffic\nSystem.setProperty(\"https.proxyHost\", \"127.0.0.1\");\nSystem.setProperty(\"https.proxyPort\", \"8888\");</p>\n<p>{% endcodeblock %}</p>\n<p>--\nThanks for playing. ~ DW</p>\n<h6>References</h6>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/8549749/how-to-capture-https-with-fiddler-in-java\">Stack Overflow - How to Capture HTTPS with Fiddler in Java</a></li>\n<li><a href=\"http://codeketchup.blogspot.ca/2014/03/how-to-use-eclipse-with-fiddler-step-by.html\">How to Use Eclipse with Fiddler</a></li>\n</ol>\n","layout":"post","title":"Capturing HTTPS Traffic in Java with Eclipse and Fiddler","date":"Wed Oct 07 2015 04:41:35 GMT-0500 (Central Daylight Time)","categories":null,"comments":true,"authorId":"david_wesst","originalurl":"http://blog.davidwesst.com/2015/10/Capturing-HTTPS-Traffic-in-Java-with-Eclipse-and-Fiddler/"}},"__N_SSG":true}