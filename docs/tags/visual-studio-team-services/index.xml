<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>visual studio team services on David Wesst</title>
    <link>https://davidwesst.com/tags/visual-studio-team-services/</link>
    <description>Recent content in visual studio team services on David Wesst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Aug 2017 12:10:00 +0000</lastBuildDate>
    
	<atom:link href="https://davidwesst.com/tags/visual-studio-team-services/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IstanbulJS Code Coverage Reports in VSTS</title>
      <link>https://davidwesst.com/blog/istanbuljs-in-vsts/</link>
      <pubDate>Thu, 03 Aug 2017 12:10:00 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/istanbuljs-in-vsts/</guid>
      <description>Here&amp;rsquo;s another dev thing I use: IstanbulJS in Visual Studio Team Services (VSTS) builds and display the test reports as part of the build reports. When a build completes, I get a report like this one.
I can browse the report right in the build report, and drill into the results for each file.
This is how I did it.
Step 0: Assumptions I&amp;rsquo;m not going to go into the details on how to setup IstanbulJS or a test suite, but you&amp;rsquo;ll need a project with tests and uses the IstanbulJS command line tool, NYC, to run them.</description>
    </item>
    
    <item>
      <title>Mocha Test Reports in VSTS</title>
      <link>https://davidwesst.com/blog/mocha-in-vsts/</link>
      <pubDate>Tue, 01 Aug 2017 11:19:00 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/mocha-in-vsts/</guid>
      <description>Here&amp;rsquo;s another dev thing I use: MochaJS in Visual Studio Team Services (VSTS) builds and display the test reports as part of the build reports. See? Like this.
This wasn&amp;rsquo;t me trying to fit a square peg into a round hole. VSTS is exceptionally flexible and it comes bundled with all the pieces you need to do this out of the box. The key is making sure that we setup our test runner to produce the output VSTS needs.</description>
    </item>
    
    <item>
      <title>How to Blog with VSTS (Part 4)</title>
      <link>https://davidwesst.com/blog/how-to-blog-with-vsts-part-4/</link>
      <pubDate>Mon, 21 Nov 2016 07:30:00 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/how-to-blog-with-vsts-part-4/</guid>
      <description>This is part 4 of 5 of my How to Blog with VSTS series. Links to the other parts will be added as they are made available.
 Part 1: Setup Part 2: Code Part 3: Work Part 4: Build Part 5: Release   I&amp;rsquo;ve been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</description>
    </item>
    
    <item>
      <title>How to Blog with VSTS (Part 3)</title>
      <link>https://davidwesst.com/blog/how-to-blog-with-vsts-part-3/</link>
      <pubDate>Mon, 14 Nov 2016 07:30:00 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/how-to-blog-with-vsts-part-3/</guid>
      <description>This is part 3 of 5 of my How to Blog with VSTS series. Links to the other parts will be added as they are made available.
 Part 1: Setup Part 2: Code Part 3: Work Part 4: Build Part 5: Release   I&amp;rsquo;ve been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</description>
    </item>
    
    <item>
      <title>How to Blog with VSTS (Part 2)</title>
      <link>https://davidwesst.com/blog/how-to-blog-with-vsts-part-2/</link>
      <pubDate>Mon, 07 Nov 2016 09:00:00 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/how-to-blog-with-vsts-part-2/</guid>
      <description>This is part 2 of 5 of my How to Blog with VSTS series. Links to the other parts will be added as they are made available.
 Part 1: Setup Part 2: Code Part 3: Work Part 4: Build Part 5: Release   I&amp;rsquo;ve been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</description>
    </item>
    
    <item>
      <title>How to Blog with VSTS (Part 1)</title>
      <link>https://davidwesst.com/blog/how-to-blog-with-vsts-part-1/</link>
      <pubDate>Mon, 31 Oct 2016 08:43:31 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/how-to-blog-with-vsts-part-1/</guid>
      <description>This is part 1 of 5 of my How to Blog with VSTS series. Links to the other parts will be added as they are made available.
 Part 1: Setup Part 2: Code Part 3: Work Part 4: Build Part 5: Release   I&amp;rsquo;ve been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</description>
    </item>
    
    <item>
      <title>How to Use Global NPM Packages on a VSTS Self-Hosted Build Agent</title>
      <link>https://davidwesst.com/blog/how-to-use-global-npm-packages-on-a-vsts-self-hosted-build-agent/</link>
      <pubDate>Mon, 24 Oct 2016 08:33:01 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/how-to-use-global-npm-packages-on-a-vsts-self-hosted-build-agent/</guid>
      <description>I took a couple of weeks off of blogging to focus on a building my presentation for Deliver. In my spare time, I started tinkering with Visual Studio Team Services, where decided to start by automating the build and release of this blog.
My build script is pretty straight forward. Setup the global dependencies with NPM, setup the local dependencies with NPM, generate the content, and publish the generated assets. This worked in my hosted agent, but not my self-hosted agent.</description>
    </item>
    
    <item>
      <title>Windows Not Required - The New Microsoft Development Story (Video)</title>
      <link>https://davidwesst.com/blog/windows-not-required-video/</link>
      <pubDate>Mon, 03 Oct 2016 10:47:31 +0000</pubDate>
      
      <guid>https://davidwesst.com/blog/windows-not-required-video/</guid>
      <description>This is a recording of my recent Winnipeg .NET User Group talk about using Microsoft tools without requiring Windows.
It&amp;rsquo;s not the most technical as I go over a ton of topics, at high level, ranging from development tools, to applications. Still, I find this stuff really interesting and hopefully you enjoy it too.
You can view the slides here and find their source code here on GitHub.</description>
    </item>
    
  </channel>
</rss>