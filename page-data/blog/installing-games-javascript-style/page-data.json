{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/installing-games-javascript-style/","result":{"data":{"markdownRemark":{"html":"<p>I bought the Humble Mozilla Bundle earlier this week and I wanted to take a moment to show people what it looks like to install a JavaScript game in the browser.</p>\n<p>When I login to my Humble Bundle account, I get this at the top of the page.</p>\n<p><img src=\"play.PNG\"></p>\n<p>Now, I click play and it installs.</p>\n<p><img src=\"ftl-1.PNG\"></p>\n<p>Then I play freaking FTL: Advanced Edition in the freaking web browser!</p>\n<p><img src=\"ftl.PNG\"></p>\n<h4>Room For Improvement</h4>\n<p>Games are big pieces of software. Making them playable inside the browser isn't a short order. Loading all the resources, like graphics, audio, and all that fun, is big.</p>\n<p>When I tried to play FTL in the browser, it took a few hours to load the first time. I mean, it's downloading the whole thing. The second time around, it up within a few minutes, and I this time I noticed that \"This page is requesting more than 50MB of space message\" as I didn't leave it overnight to load.</p>\n<p>Clearly there is room for improvement, but this is still a huge step forward for the way we can distrubute games and other software.</p>\n<h3>The Point</h3>\n<p>This is a real use case of companies taking their non-JavaScript software and making it accessible via the browser. </p>\n<p>Take any LOB application that you want to port forward, and consider that you could make it accessible through a web portal, or inside of SharePoint, or whatever.</p>\n<p>Now, you just worry the the game works in the browser and not the specific platforms.</p>\n<p>Thanks for Playing. ~ DW</p>","frontmatter":{"title":"Installing Games JavaScript Style"}}},"pageContext":{"slug":"/installing-games-javascript-style/"}},"staticQueryHashes":["3159585216"]}