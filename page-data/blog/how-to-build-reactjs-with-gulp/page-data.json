{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/how-to-build-reactjs-with-gulp/","result":{"data":{"markdownRemark":{"html":"<p>I wanted to play with ReactJS last week and figured I would just add another gulp talk to my build process, being that it's all the rage right now.</p>\n<p>It turns out that it wasn't that simple, as it turns out that the <a href=\"https://www.npmjs.com/package/gulp-react\"><code>gulp-react</code></a> has been \"deprecated in favor of gulp-babel\". I hadn't planned on learning <a href=\"http://babeljs.io/\">Babel</a>, but it turns out it wasn't very difficult once I was able to put all the pieces together.</p>\n<p>Here's what I did.</p>\n<p>You can find an extended version of the code in this post in my web project's <a href=\"https://github.com/davidwesst/dw-www/blob/master/gulpfile.js\"><code>gulpfile.js</code></a>. As of this writing, it can be found in the <code>feat/talks</code> branch but should be merged into the <a href=\"https://github.com/davidwesst/dw-blog\"><code>master</code></a> branch  soon enough.</p>\n<h2>The Gulp Task</h2>\n<p>Let's start with the gulp task and I'll walk you though it step by step.</p>\n<pre><code class=\"language-javascript\">// packages \nvar gulp        = require('gulp'),\n    babel       = require('gulp-babel'),\n    sourcemaps  = require('gulp-sourcemaps');\n    \n// build all the JavaScript things\ngulp.task('build-script', function() {\n    var src = [\n        './src/script/*.js',\n        './src/components/*.jsx'\n        ];\n\n    return gulp.src(src)\n                .pipe(sourcemaps.init())\n                .pipe(babel({\n                    presets: [\n                        'es2015',\n                        'react'\n                        ]\n                    }))\n                .pipe(concat('dw.js'))\n                .pipe(gulp.dest('./dist/script'));\n});\n</code></pre>\n<p>It's not overly complex, but there is a lot going on. Let me walk you though it.</p>\n<h3>Dependencies</h3>\n<pre><code class=\"language-javascript\">// packages\nvar gulp        = require('gulp'),\n    babel       = require('gulp-babel'),\n    sourcemaps  = require('gulp-sourcemaps');\n</code></pre>\n<p>These are the packages I used in this solution. Here's the breakdown in case you don't feel like searching out each one:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gulp\">gulp</a> is the build tool itself</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-babel\">gulp-babel</a> is the babel plugin that builds react for us</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-sourcemaps\">gulp-sourcemaps</a> is a pluging that generates sourcemaps for us</li>\n</ul>\n<p>There are a couple of unlisted packages that you'll need as well. More specifically, the Babel preset packages. I use two:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/babel-preset-es2015\">babel-preset-es2015</a> because writing modern JavaScript is awesome and helps with writing ReactJS code.</li>\n<li><a href=\"https://www.npmjs.com/package/babel-preset-react\">babel-preset-react</a> which does the ReactJS stuff we need</li>\n</ul>\n<p><strong>NOTE: You don't need the es2015 preset package, but you should use because you don't hate yourself enough to write old JavaScript</strong></p>\n<h3>Pipeline</h3>\n<p>Things start simple with the declaration of my source files and kicking off the gulp pipe:</p>\n<pre><code class=\"language-javascript\">var src = [\n        './src/script/*.js',\n        './src/components/*.jsx'\n        ];\n\n    return gulp.src(src)\n</code></pre>\n<p>Next up, I intialize the sourcemaps plugin</p>\n<pre><code class=\"language-javascript\">.pipe(sourcemaps.init())\n</code></pre>\n<p>If you're not sure what sourcemaps are, <a href=\"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\">look them up</a> as all the browser development tools support them and they made debugging transpiled code much easier.</p>\n<p>Now, we leverage all the Babel things and do the actual transpilation.</p>\n<pre><code class=\"language-javascript\">.pipe(babel({\npresets: [\n    'es2015',\n    'react'\n]\n</code></pre>\n<p>At this point were piping our source code into Babel, and it applies the preset <a href=\"https://babeljs.io/docs/plugins/\">babel plugins</a> for ES2015 and React. If you didn't include the presets earlier, you would get an error at this point so make sure they're installed.</p>\n<p>Now we just write out our sourcemaps and our newly compiled JavaScript and JSX files to our output directory.</p>\n<pre><code class=\"language-javascript\">.pipe(sourcemaps.write('.'))\n.pipe(gulp.dest('./dist/script'));\n</code></pre>\n<p>Et voila! Your gulp task transpiles your JSX and JS files. You can even use some <a href=\"https://babeljs.io/docs/learn-es2015/\">ES2015</a> to boot.</p>","frontmatter":{"title":"How to Build ReactJS with Gulp"}}},"pageContext":{"slug":"/how-to-build-reactjs-with-gulp/"}}}